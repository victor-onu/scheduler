{"version":3,"sources":["components/NavigationBar.js","components/Footer.js","components/Recipient.js","components/Welcome.js","components/ReportList.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","variant","to","className","Brand","href","src","width","height","alt","Nav","Component","Footer","fullYear","Date","getFullYear","fixed","Container","Col","lg","Recipient","props","initialState","firstName","lastName","email","submitRecipient","event","preventDefault","recipient","state","axios","post","then","response","data","setState","alert","recipientChange","target","name","value","bind","this","Card","Form","id","onSubmit","Header","icon","faPlusSquare","Body","Group","controlId","as","Label","Control","required","autoComplete","type","onChange","placeholder","Text","style","Button","size","faSave","Welcome","Jumbotron","ReportList","isLoading","Reports","fetch","json","body","rows","map","report","key","reportTitle","reportDescription","reportDocument","status","scheduleExpression","url","ButtonGroup","faTrash","faList","Table","bordered","hover","striped","App","Row","marginTop","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf07eefc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Navbar, Nav} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class NavigationBar extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Link to={\"/\"} className=\"navbar-brand\">\r\n                <Navbar.Brand href=\"/\"><img src=\"schedule.png\" width=\"25\" height=\"25\" alt=\"brand-icon\"/>Report Scheduler</Navbar.Brand>\r\n                </Link>\r\n\r\n                <Nav className=\"mr-auto\">\r\n                    <Link to={\"/addRecipient\"} className=\"nav-link\">Add Recipient</Link>\r\n                    <Link to={\"/addReport\"} className=\"nav-link\">Upload Report</Link>\r\n                    <Link to={\"/ReportList\"} className=\"nav-link\">View Reports</Link>\r\n                </Nav>\r\n        \r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport {Navbar, Container, Col} from 'react-bootstrap';\r\n\r\nclass Footer extends Component {\r\n    \r\n    render() { \r\n\r\n        let fullYear = new Date().getFullYear();\r\n        return ( \r\n            <Navbar bg=\"dark\" variant=\"dark\" fixed=\"bottom\">\r\n                <Container>\r\n                    <Col lg={12} className=\"text-center text-muted\">\r\n                        <div>\r\n                            {fullYear}, All right reserved\r\n                        </div> \r\n                    </Col>\r\n                </Container>\r\n\r\n            </Navbar>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Footer;","import React, { Component } from 'react';\r\nimport {Card, Form, Button, Col} from 'react-bootstrap';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faSave, faPlusSquare} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\n\r\nclass Recipient extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = this.initialState;\r\n        this.recipientChange = this.recipientChange.bind(this)\r\n        this.submitRecipient = this.submitRecipient.bind(this)\r\n    }\r\n\r\n    initialState = {\r\n        firstName: '', lastName: '', email: ''\r\n    }\r\n\r\n    submitRecipient = event =>{\r\n        event.preventDefault();\r\n\r\n        const recipient = {\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            email: this.state.email\r\n        }\r\n        axios.post(\"/api/recipient\", recipient)\r\n        .then(response=>{\r\n            if (response.data != null) {\r\n                this.setState(this.initialState);\r\n                alert(\"recipient saved successfully\")\r\n            }\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    recipientChange = event => {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n    \r\n    render() { \r\n        const {firstName, lastName, email} = this.state;\r\n        return ( \r\n            <Card className=\"border border-dark bg-dark text-white\">\r\n                <Form id=\"recipientFormId\" onSubmit={this.submitRecipient}>\r\n                    <Card.Header><FontAwesomeIcon icon={faPlusSquare} /> Add Recipient</Card.Header>\r\n                        <Card.Body>\r\n                                <Form.Group controlId=\"firstName\" as={Col}>\r\n                                    <Form.Label>First Name</Form.Label>\r\n                                    <Form.Control required autoComplete = \"off\"\r\n                                    name=\"firstName\" type=\"test\"\r\n                                    value={firstName}\r\n                                    onChange={this.recipientChange} \r\n                                    placeholder=\"Enter first name\" \r\n                                    className=\"text-white bg-dark\" \r\n                                    />\r\n                                    <Form.Text >\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"lastName\" as={Col}>\r\n                                    <Form.Label>Last Name</Form.Label>\r\n                                    <Form.Control required autoComplete = \"off\"\r\n                                        name=\"lastName\" \r\n                                        value={lastName}\r\n                                        onChange={this.recipientChange} \r\n                                        type=\"test\" \r\n                                        placeholder=\"Enter last name\" \r\n                                        className=\"text-white bg-dark\" \r\n                                    />\r\n                                    <Form.Text >\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"email\" as={Col}>\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control required autoComplete = \"off\"\r\n                                        name=\"email\" \r\n                                        value={email}\r\n                                        onChange={this.recipientChange}\r\n                                        type=\"test\" placeholder=\"Enter email\" \r\n                                        className=\"text-white bg-dark\" />\r\n                                    <Form.Text >\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                           \r\n                        </Card.Body>\r\n\r\n                <Card.Footer style={{\"text-align\": \"right\"}}>\r\n                    <Button variant=\"success\" type=\"submit\" size=\"sm\">\r\n                    <FontAwesomeIcon icon={faSave} /> Submit\r\n                    </Button>\r\n                </Card.Footer>\r\n\r\n                </Form>\r\n            </Card>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Recipient;","import React, { Component } from 'react';\r\nimport {  Jumbotron } from 'react-bootstrap';\r\n\r\nclass Welcome extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <Jumbotron className=\"bg-dark text-white\">\r\n            <h1>Welcome to the Report Scheduler!</h1>\r\n            <blockquote className=\"blockquote mb-0\">\r\n                <p>\r\n                “A plan is what, a schedule is when. It takes both a plan and a schedule to get things done.”\r\n                </p>\r\n                <footer className=\"blockquote-footer\">\r\n                Peter Turla\r\n                </footer>\r\n            </blockquote>\r\n              \r\n        </Jumbotron>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Welcome;","import React, { Component } from 'react';\r\nimport {Card, Table, ButtonGroup, Button} from 'react-bootstrap';\r\nimport { faList, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nclass ReportList extends Component {\r\n    \r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         reports: []\r\n    //     };\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     axios.get(\"/api/report\")\r\n    //     .then(response => response.data)\r\n    //     .then((data) => {\r\n    //         this.setState({reports: data})\r\n    //     }\r\n    //    )\r\n    // }\r\n\r\n    state = {\r\n        isLoading: true,\r\n        Reports: []\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const response = await fetch('/api/report')\r\n        const body = await response.json();\r\n        this.setState({Reports: body, isLoading: false})\r\n    }\r\n\r\n    render() { \r\n        const {Reports, isLoading} = this.state;\r\n        if(isLoading){\r\n            return(<div>Loading...</div>) \r\n        }\r\n\r\n        let rows =\r\n            Reports.data.map(report =>\r\n                <tr key = {report.id}>\r\n                <td>{report.reportTitle}</td>\r\n                <td>{report.reportDescription}</td>\r\n                <td>{report.reportDocument}</td>\r\n                <td>{report.status}</td>\r\n                <td>{report.scheduleExpression}</td>\r\n                <td>{report.url}</td>\r\n                <td>\r\n                    <ButtonGroup>\r\n                        <Button size=\"sm\" variant=\"outline-danger\"> <FontAwesomeIcon icon={faTrash} /></Button>\r\n                    </ButtonGroup>\r\n                </td>\r\n            </tr>\r\n                ) \r\n\r\n        return ( \r\n        \r\n            <Card className=\"border border-dark bg-dark text-white\">\r\n                <Card.Header><FontAwesomeIcon icon={faList} /> Report List</Card.Header>\r\n                <Card.Body>\r\n                    <Table bordered hover striped variant=\"dark\">\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Title</th>\r\n                            <th>Description</th>\r\n                            <th>Document Name</th>\r\n                        \r\n                            <th>Status</th>\r\n                            <th>Schedule</th>\r\n                            <th>Document Link</th>\r\n                            <th>Cancel</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {rows}                   \r\n                            \r\n                        </tbody>\r\n\r\n                    </Table>\r\n                </Card.Body>\r\n            </Card>\r\n        \r\n        );\r\n        \r\n    }\r\n}\r\n \r\nexport default ReportList; ","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Footer from './components/Footer';\nimport Recipient from './components/Recipient';\nimport Welcome from './components/Welcome';\nimport ReportList from './components/ReportList';\n\n\nfunction App() {\n  const marginTop={\n    marginTop: \"20px\"\n  }\n  return (\n    <Router>\n        <NavigationBar/>\n        <Container>\n          <Row>\n            <Col lg={12} style={marginTop}>\n\n              <Switch>\n                <Route path=\"/\" exact component={Welcome}  />\n                <Route path=\"/addRecipient\" exact component={Recipient}  />\n                <Route path=\"/Reportlist\" exact component={ReportList}  />  \n              </Switch>\n\n            </Col>\n\n            </Row>\n\n        </Container>\n        <Footer/>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}